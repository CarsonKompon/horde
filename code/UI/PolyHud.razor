@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@inherits PanelComponent

<root>
	<div class="free-mouse" />

	@if (Player.Local is not null)
	{
		int ind = 0;
		var players = Scene.GetAllComponents<Player>();

		<div class="notifications" @ref="NotificationPanel">
		</div>

		<div class="leaderboard">
			@foreach (var player in players.OrderBy(x => x.Kills))
			{
				@if (ind == 4)
				{
					<div class="more">and @(players.Count() - ind) more...</div>
				}
				else if (ind < 4)
				{
					<div class="player">
						<div class="info">
							<img class="avatar" src="@($"avatar:{player.Network.Owner.SteamId}")" />
							<div class="name-container">
								<p class="name">@player.Network.Owner.DisplayName</p>
								<div class="health">
									<div class="bars">
										@for (int i = 0; i < System.Math.Ceiling(player.Health / 10); i++)
										{
											var segmentValue = System.Math.Clamp(player.Health - i * 10, 0, 10);
											var height = segmentValue / 10 * 100;
											<div class="bar" style="height: @(height)%;"></div>
										}
									</div>
									<p class="hp">@Math.Ceiling(player.Health)</p>
								</div>
							</div>
						</div>
						<p class="kills">@player.Kills ðŸ’€</p>
					</div>
				}
				ind++;
			}
		</div>

		<div class="health">
			<div class="bars">
				@for (int i = 0; i < System.Math.Ceiling(Player.Local.Health / 10); i++)
				{
					var segmentValue = System.Math.Clamp(Player.Local.Health - i * 10, 0, 10);
					var height = segmentValue / 10 * 100;
					<div class="bar" style="height: @(height)%;"></div>
				}
			</div>
			<p class="hp">@Math.Ceiling(Player.Local.Health)</p>
		</div>

		@if (Player.Local.CurrentWeapon is not null)
		{
			var weapon = Player.Local.CurrentWeapon;
			<div class="weapon">
				<img src=@weapon.Icon class="icon" />
				@if (weapon.ClipSize == 0)
				{
					<img src="ui/infinity.png" class="infinite-ammo" />
				}
				else
				{
					<p class="ammo">@weapon.Ammo / @weapon.ClipSize</p>
				}
			</div>
		}
	}

	@if (!HordeManager.Instance.InGame)
	{
		<div class="game-over">
			<h1>GAME OVER</h1>
			<div class="options">
				@if (Networking.IsHost)
				{
					<p class="btn" onclick=@PlayAgain>Play Again</p>
				}
				else
				{
					<p class="btn disabled">Waiting for host...</p>
				}
				<p class="btn" onclick=@ReturnToMenu>Return to Menu</p>
			</div>
		</div>
	}
	else if (IsPaused)
	{
		<div class="pause-menu">
			<h1>PAUSED</h1>
			<div class="options">
				<div class="option">
					<p>Music</p>
					<SliderControl Min=@(0) Max=@(100) Value:bind="@HordePreferences.Settings.Volume" />
				</div>
				<p class="btn" onclick=@ReturnToMenu>Return to Menu</p>
			</div>
		</div>
	}
	<div class="screen-overlay" />
</root>

@code
{
	public static PolyHud Instance { get; private set; }
	Panel NotificationPanel { get; set; }

	[Property] SceneFile MenuScene { get; set; }

	public bool IsPaused = false;

	protected override void OnStart()
	{
		base.OnStart();
		Instance = this;
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();

		if (Input.EscapePressed)
		{
			IsPaused = !IsPaused;
			if (!IsPaused) HordePreferences.Save();
		}
	}

	void PlayAgain()
	{
		if (Networking.IsHost)
			HordeManager.Instance.ResetGame();
	}

	void ReturnToMenu()
	{
		Networking.Disconnect();
		Scene.Load(MenuScene);
	}

	public void AddNotification(string text, float time = 3f)
	{
		var notification = new Notification(text, time);
		var popup = NotificationPanel.AddChild<NotificationPopup>();
		popup.Notification = notification;
	}

	protected override int BuildHash() => System.HashCode.Combine(Time.Now);

	public class Notification
	{
		public string Message { get; set; }
		public TimeSince TimeSinceBorn { get; set; }
		public float Time { get; set; } = 3f;

		public Notification(string message, float time = 4f)
		{
			Message = message;
			TimeSinceBorn = 0f;
			Time = time;
		}
	}
}